--track0:繰返し,-1000,1000,1,1
--track1:文字数,-5000,5000,0,1
--track2:開始位置,-1000,1000,0,1
--track3:変数n,-10000,10000,0,1
--dialog:コピペ用,local copype="<?mes(txrepet('ここにテキスト'))?>";繰返し毎に改行,txrepet_rl=5;文字毎に改行,txrepet_sl=0;行単位/chk,txrepet_row=0;<...>を数えない/chk,txrepet_esc=1;変数を利用/chk,txrepet_use=0;繰返しｲﾝﾃﾞｯｸｽi,txrepet_i="i";└整数部の長さ,txrepet_il=2;└小数部の長さ,txrepet_ir=0;変数n,txrepet_n="n";└整数部の長さ,txrepet_nl=2;└小数部の長さ,txrepet_nr=0;フィールド0埋め/chk,txrepet_dume=0;
if obj.index > 0 then return end
txrepet_r = math.floor(obj.track0 + 0.5)
txrepet_q = math.floor(obj.track1 + 0.5)
txrepet_bgn = math.floor(obj.track2 + 0.5)
txrepet_tn = math.floor(obj.track3 + 0.5)

function txrepet(s)
local sgsub = string.gsub

-- シフトJISによる多バイト文字テーブル出力関数
local function mchrlist(str)
	local sbyte = string.byte
	local ssub = string.sub
	local list = {}
	
	-- 文字コード上の1文字ずつ調べていく
	while true do
		local sjis = sbyte(str, 1)
		if (0 <= sjis and sjis <= 0x1f) or (sjis == 0x7f) or (0x20 <= sjis and sjis <= 0x7e) or (0xa1 <= sjis and sjis <= 0xdf) then
			table.insert(list, ssub(str,1,1))
			str = ssub(str, 2, #str)
		elseif (0x81 <= sjis and sjis <= 0x9f) or (0xe0 <= sjis and sjis <= 0xef) then
			-- 2文字目を調べる
			sjis = sbyte(str, 2)
			if (0x40 <= sjis and sjis <= 0x7e) or (0x80 <= sjis and sjis <= 0xfc) then
				table.insert(list, ssub(str, 1, 2))
			end
			str = ssub(str, 3, #str)
		else
			str = ssub(str, 2, #str)
		end
		if #str <= 0 then break end
	end
	return list
end

-- 山括弧エスケープ関数
local function esc_yama(str)
	local list = {}
	local begin, last, tmp = string.find(str, "(%b<>)")
	local i = 1
	
	while begin do
		list[i] = {}
		list[i].begin = begin
		list[i].str = tmp
		str = sgsub(str, "(%b<>)", "", 1)
		begin, last, tmp = string.find(str, "(%b<>)")
		i = i + 1
	end
	return str, list
end

-- 山括弧挿入関数
local function ins_yama(list, yama)
	local s_tmp = ""
	local cnt_yama = 1
	local rtn = {}
	if yama[1].begin == 1 then cnt_yama = 2 end
	
	for k, v in ipairs(list) do
		s_tmp = s_tmp .. v
		if (cnt_yama <= #yama) and (string.len(s_tmp) + 1 >= yama[cnt_yama].begin) then
			rtn[k] = v .. yama[cnt_yama].str
			cnt_yama = cnt_yama + 1
		else
			rtn[k] = v
		end
	end
	if yama[1].begin == 1 then rtn[1] = yama[1].str .. (rtn[1] or "") end
	return rtn
end

-- 変数を更新
local function update_var(left, right, i, n)
	-- グローバル変数化
	txrepet_gI = i
	txrepet_gN = n
	local f = load(left .. "=" .. right)
	f()
end

-- 変数フォーマット関数
local function format_var(l, r, v)
	local a = l + (r or 0)
	if a ~= l then a = a + 1 end
	local ume = ""
	if txrepet_dume == 1 then ume = "0" end
	
	if type(a) ~= "number" or a <= 0 then
	elseif type(r) ~= "number" or r <= 0 then
		v = string.format("%"..ume..a.."d", v)
	else
		v = string.format("%"..ume..a.."."..r.."f", v)
	end
	return v
end

local r, q, bgn, n = txrepet_r, txrepet_q, txrepet_bgn, txrepet_tn
local rl, sl = tonumber(txrepet_rl), tonumber(txrepet_sl)
if type(rl) ~= "number" or rl <= 0 then rl = false end
if type(sl) ~= "number" or sl <= 0 then sl = false end
local ir, nr

local s_tmp = s
if txrepet_use == 1 then
	s = sgsub(s, "(%$%$)", "eSc_ドル")
	s = sgsub(s, "($i)", "eSc_アイ")
	s = sgsub(s, "($n)", "eSc_エヌ")
	s = sgsub(s, "(i)", "齪")
	s = sgsub(s, "(n)", "齷")
	s = sgsub(s, "(%$)", "")
	s = sgsub(s, "(eSc_アイ)", "i")
	s = sgsub(s, "(eSc_エヌ)", "n")
	s = sgsub(s, "(eSc_ドル)", "%$")
	
	-- グローバル変数に置換する関数
	local function replace_r(r)
		local function replace_r_in(r, str1, str2)
			r = sgsub(r, "(%W)"..str1.."(%W)", "%1"..str2.."%2")
			r = sgsub(r, "(%W)"..str1.."$", "%1"..str2.."")
			r = sgsub(r, "^"..str1.."(%W)", str2.."%1")
			if string.find(r, "^"..str1.."%s-") or string.find(r, "%s-"..str1.."$") or string.find(r, "^%s*"..str1.."%s") then
				r = sgsub(r, str1, str2)
			end
			return r
		end

		r = replace_r_in(r, "i", "txrepet_gI")
		r = replace_r_in(r, "n", "txrepet_gN")
		return r
	end
	
	ir = replace_r(txrepet_i)
	nr = replace_r(txrepet_n)
end
if s_tmp == s then txrepet_use = 0 end

if txrepet_esc == 1 then s, yama = esc_yama(s) end
local t = mchrlist(s)
if txrepet_esc == 1 and #yama > 0 then t = ins_yama(t, yama) end

-- ここから先string.lenを使わないこと
if txrepet_row == 1 then
	if rl then
		r = r * rl
	elseif sl then
		q = q + (r * sl) % #t
		r = math.floor(r * sl / #t)
	end
end

local len = r * #t + q

if len < 0 then return "" end -- 長さが負の場合は終了
len = math.min(len, 5000) -- 5000文字に制限

r = math.floor(len / #t)
q = len % #t

local c = ""
local cnt = 0
local set = ""

for l = 1, #t do
	set = set .. t[(l + bgn - 1) % #t + 1]
end

-- 軽量化のために場合分け
if txrepet_use == 0 and not rl and not sl then
	for k = 1, r do
		c = c .. set
	end
elseif txrepet_use == 0 and ((not sl and rl) or (sl and sl % #t == 0 and not rl)) then
	if sl then rl = sl / #t end
	local n = 0
	if r >= rl then
		for k = 1, rl do
			c = c .. set
		end
		c = c .. "\n"
		local set_line = c
		n = math.floor(r / rl)
		for j = 2, n do
			c = c .. set_line
		end
	end
	for k = 1, r - n * rl do
		c = c .. set
	end
else
	for k = 1, r do
		for l = 1, #t do
			c = c .. t[(l + bgn - 1) % #t + 1]
			cnt = cnt + 1
			if sl and cnt >= sl then
				c = c .. "\n"
				cnt = 0
			end
		end
		
		if rl and k % rl == 0 then
			c = c .. "\n"
		end
		if txrepet_use == 1 then
			update_var("var_i", ir, k, n)
			update_var("var_n", nr, k, n)
			c = sgsub(c, "(齪)", format_var(txrepet_il, txrepet_ir, var_i))
			c = sgsub(c, "(齷)", format_var(txrepet_nl, txrepet_nr, var_n))
		end
	end
end

for k = 1, q do
	c = c .. t[(k + bgn - 1) % #t + 1]
	cnt = cnt + 1
	if sl and cnt >= sl and k ~= q then
		c = c .. "\n"
		cnt = cnt % sl
	end
end
if txrepet_use == 1 then
	update_var("var_i", ir, r + 1, n)
	update_var("var_n", nr, r + 1, n)
	c = sgsub(c, "(齪)", format_var(txrepet_il, txrepet_ir, var_i))
	c = sgsub(c, "(齷)", format_var(txrepet_nl, txrepet_nr, var_n))
end

return c
end